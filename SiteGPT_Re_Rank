from langchain_community.document_loaders import SitemapLoader
import streamlit as st
import logging
from fake_useragent import UserAgent
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain.vectorstores.faiss import FAISS
from langchain.embeddings import OpenAIEmbeddings
from langchain.prompts import ChatPromptTemplate
from langchain.chat_models import ChatOpenAI
from langchain.schema.runnable import RunnablePassthrough, RunnableLambda,RunnableMap

llm = ChatOpenAI(
    temperature=0.1,
)

answers_prompt = ChatPromptTemplate.from_template(
    """
    Using ONLY the following context answer the user's question. If you can't just say you don't know, don't make anything up.
                                                  
    Then, give a score to the answer between 0 and 5.

    If the answer answers the user question the score should be high, else it should be low.

    Make sure to always include the answer's score even if it's 0.

    Context: {context}
                                                  
    Examples:
                                                  
    Question: How far away is the moon?
    Answer: The moon is 384,400 km away.
    Score: 5
                                                  
    Question: How far away is the sun?
    Answer: I don't know
    Score: 0
                                                  
    Your turn!

    Question: {question}
"""
)

def get_answers(inputs):
    docs = inputs['docs']
    question = inputs['question']
    answers_chain = answers_prompt | llm
    answers = []
    for doc in docs:
        result = answers_chain.invoke({
            'context': doc.page_content,
            'question': question,
        })
        answers.append(result.content)
    return answers

def parse_page(soup):
    header = soup.find("header")
    footer = soup.find("footer")
    if header:
        header.decompose()
    if footer:
        footer.decompose()
    return (
        str(soup.get_text())
        .replace("\n", " ")
        .replace("\xa0", " ")
        .replace("CloseSearch Submit Blog", "")
    )


# Configure logging
logging.basicConfig(level=logging.DEBUG)

# Initialize a UserAgent object
ua = UserAgent()

@st.cache_resource(show_spinner="Loading website...")
def load_website(url):
    splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(
        chunk_size=1000,
        chunk_overlap=200,
    )
    try:
        loader = SitemapLoader(
            url,
            #filter_urls=[r"^(.*\/blog\/).*"],
            parsing_function=parse_page,
                               )
        loader.requests_per_second = 3
        # Set a realistic user agent
        loader.headers = {'User-Agent': ua.random}
        docs = loader.load_and_split(text_splitter=splitter)
        #logging.debug(f"Loaded documents: {docs}")
        if not docs:
            logging.warning("No documents found in sitemap.")
            return None
        
        vector_store = FAISS.from_documents(
            docs,
            OpenAIEmbeddings(),
        )
        return vector_store.as_retriever()
        #return docs
    except Exception as e:
        logging.error(f"Error loading sitemap: {e}")
        return None

st.set_page_config(
    page_title="SiteGPT",
    page_icon="üåê",
)

st.markdown(
    """
    # SiteGPT
    
    Ask questions about the content of a website.
    
    Start by writing the URL of the website on the sidebar.
    """
)

with st.sidebar:
    url = st.text_input(
        "Enter a URL.",
        placeholder="https://example.com/sitemap.xml",
    )

if url:
    if ".xml" not in url:
        with st.sidebar:
            st.error("Please write down a Sitemap URL.")
    else:
        retriever = load_website(url)
        if retriever is None:
            st.error("‚ùå Failed to load retriever. Please check your sitemap URL.")

        else:
            chain = RunnableMap ({
                "docs": RunnableLambda(lambda question: retriever.get_relevant_documents(question)),
                "question": RunnablePassthrough(),
            }) | RunnableLambda(get_answers)
            result = chain.invoke("What is most valuable of htmlburger.")
           
            st.write(result)
            
            '''if retriever:
                st.write(retriever)
            else:
                st.error(
                    "Failed to load documents from the sitemap. Please check the URL and try again."
                )'''
            
            #siteuse: https://htmlburger.com/sitemap.xml
